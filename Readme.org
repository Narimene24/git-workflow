#+AUTHOR:    Aziz Yemloul
#+EMAIL:     azizyemloul@gmail.com
#+CREATOR:
#+DESCRIPTION:
#+LANGUAGE:  fr
#+HTML_DOCTYPE: html5
#+OPTIONS:   H:3 num:nil toc:t \n:t @:t ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:t p:t todo:t stat:t pri:nil tags:t
#+OPTIONS:   html5-fancy:t html-postamble:nil html-preamble:nil
#+OPTIONS:   timestamp:nil author:nil creator:nil email:nil c:t e:t inline:t
#+TITLE:
* Objectif
Formaliser   le   fonctionnement   d'une  équipe   de   collaborateurs
travaillant sur un projet de développement.
* Le scénario type
Ci-dessous  le  scénario type  d'un  développeur  sur une  journée  de
travail. Ce déroulé sera expliqué en détail à la fin de ce document.
#+BEGIN_EXAMPLE
$ git fetch
$ git merge origin/master
# résolution des conflits
$ git add .
$ git commit -m "Etat du jour 1"
# développement - ajouts - modification
$ git add .
$ git commit -m "Etat du jour 2"
# développement - ajouts - modification
$ git add .
$ git commit -m "Etat du jour 3"
# dernière vérification avant l'envoi
$ git fetch
$ git merge origin/master
# résolution des conflits
$ git add .
$ git commit -m "Etat de fin de journée de travail"
$ git push
#+END_EXAMPLE
* La notion de workflow
Une dépôt ~Git~ centralise le travail de plusieurs intervenants sur un
projet de développement.

La prise en main de ce logiciel  n'est pas intuitive. La mise en place
d'un schéma de  fonctionnement de base permettra  de l'exploiter avant
de le maîtriser.

* Le dépôt
Chaque collaborateur commence par héberge sur son ordinateur une copie
du dépôt central.

#+BEGIN_SRC sh
git clone adresse_du_depot nom_local
#+END_SRC

#+BEGIN_HTML
<img src="./img/collab0.png" width=200 height=200 />
#+END_HTML

À chaque fois  qu'il l'estime nécessaire, un collaborateur  met à jour
le dépôt central en envoyant l'état d'avancement de son travail.

#+BEGIN_HTML
<img src="./img/bob_push.png" width=200 height=200 />
#+END_HTML

#+BEGIN_SRC sh
git add .
git commit -m "Message descriptif des ajouts"
git push
#+END_SRC

Si un autre collaborateur souhaite  à son tour envoyer l'avancement de
son travail, l'état du dépôt central aura changé.

#+BEGIN_HTML
<img src="./img/mary_failed_push.png" width=200 height=200 />
#+END_HTML

Le ~push~ échouera alors, avec un message d'erreur semblable au suivant :
#+BEGIN_EXAMPLE
$ git push
 ! [rejected]        master -> master (fetch first)
error: impossible de pousser des références vers 'adresse_du_depot'
astuce: Les mises à jour ont été rejetées car la branche distante contient du travail que
astuce: vous n'avez pas en local. Ceci est généralement causé par un autre dépôt poussé
astuce: vers la même référence. Vous pourriez intégrer d'abord les changements distants
astuce: (par exemple 'git pull ...') avant de pousser à nouveau.
astuce: Voir la 'Note à propos des avances rapides' dans 'git push --help' pour plus d'information.
$
#+END_EXAMPLE

* La gestion des conflits
~Git~   offre    différentes   possibilités   pour    résoudre   cette
situation.  Celle  présentée  ci-dessous   offre  l'avantage  de  nous
familiariser avec le logiciel.

** La stratégie à la ~fetch~ ~merge~
La  commande   ~git  fetch~  permet   de  récupérer  le   nouvel  état
d'avancement  du  dépôt  et  le mettre  dans  un  emplacement  virtuel
~origin/master~ sans écraser le travail effectué par le collaborateur.

#+BEGIN_SRC sh
$ git fetch
remote: Counting objects: 5, donne.
remote: Compressing objects: 100% (2/2), donne.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), donne.
Depuis adresse_du_depot
   7f934c9..a25526d  master     -> origin/master
$
#+END_SRC

La  commande  ~git  merge  origin/master~ rassemblera  la  version  du
serveur avec le travail déjà  effectué par le collaborateur en faisant
ressortir les conflits qu'il pourra résoudre à son aise.

#+BEGIN_SRC sh
$ git merge origin/master
Fusion automatique de README.md
CONFLIT (contenu) : Conflit de fusion dans README.md
La fusion automatique a échoué ; réglez les conflits et validez le résultat.
$
#+END_SRC

Les conflits, ici contenus dans le fichier ~README.md~ pour l'exemple,
seront clairement délimités par ~Git~ grâce à des marqueurs clairs.

#+BEGIN_EXAMPLE
<<<<<<< HEAD
La version
locale
=======
La version
du dépôt central
>>>>>>> origin/master
#+END_EXAMPLE

Le collaborateur n'aura qu'à choisir  quelle portion du code garder et
celle qu'il désactivera en la  commentant avant d'envoyer sur le dépôt
central.  Il   devra  avant  cela  également   enlever  les  marqueurs
introduits par ~Git~ pour indiquer les conflits :

#+BEGIN_EXAMPLE
<<<<<<< HEAD
=======
>>>>>>> origin/master
#+END_EXAMPLE

#+BEGIN_SRC sh
$ git commit -m "Merge de conflits avec la version du dépôt central"
$ git push
#+END_SRC

** ~Git~, un logiciel aux possibilités larges
~Git~ était au départ un système de fichier optimisé qui a évolué vers
un  système de  gestion  de  version centralisé.  Cette  aspect de  sa
conception lui donne une grande flexibilité.

La gestion  des conflits  comme nous avons  vu précédemment  peut être
conduite selon plusieurs stratégies. [[./alarebase.org][À la rebase]] par exemple.

Il existe néanmoins une autre  stratégie qui est considéré aujourd'hui
comme une spécificité grâce à  laquelle ~Git~ surpasse ses concurrents
dans le domaine de la gestion centralisée du travail collaboratif, les
~branches~.

C'est cette spécificité que nous  souhaitons exploiter de manière plus
poussée et qui  donnera lieu à de nouveaux documents  dans le cadre de
ce projet de formalisation d'un workflow.

* Explication du scénario type
** Première phase
La première action  du développeur au début de sa  journée et avant de
toucher à  son code est  de tirer  à lui la  version du dépôt  afin de
s'assurer que ses  ajouts se feront à  partir de la version  la plus à
jour.
#+BEGIN_EXAMPLE
$ git fetch
# ....
#+END_EXAMPLE
La  sortie  de  ~git  fetch~  indiquera  clairement  si  de  nouvelles
modifications ont été apportées au dépôt central
#+BEGIN_EXAMPLE
$ git fetch
git@localhost's password:
remote: Counting objects: 6, donne.
remote: Compressing objects: 100% (3/3), donne.
remote: Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), donne.
Depuis localhost:~/project
   07d5585..0ba7c21  master     -> origin/master
#+END_EXAMPLE
Si la commande ~git fetch~ ne  renvoie pas de sortie cela signifie que
l'espace de  travail du  développeur est  à jour  avec celui  du dépôt
central. En d'autres termes, le dernier commit envoyé au dépôt central
a été le sien.

Si de  nouveaux commits ont été  ajouté au dépôt central,  la commande
~git fetch~  en rend compte.  Il faudra alors au  développeur examiner
les conflits  et les inclure  avec son travail avant  d'enregistrer le
nouvel état obtenu dans un nouveau commit.
#+BEGIN_EXAMPLE
$ git merge origin/master
# résolution des conflits
$ git add .
$ git commit -m "Merge du dernier état du dépôt"
#+END_EXAMPLE
** Deuxième phase
La journée de  travail sera une succession d'ajouts et  de commits que
le  développeur  excutera   dans  son  espace  de   travail,  sur  son
ordinateur.
#+BEGIN_EXAMPLE
# développement - ajouts - modification
$ git add .
$ git commit -m "Etat du jour 2"
# développement - ajouts - modification
$ git add .
$ git commit -m "Etat du jour 3"
#+END_EXAMPLE
** Troisième et dernière phase
À  la fin  de journée  de travail  le développeur  devra avoir  envoyé
l'état d'avancement de son travail du jour vers le dépôt central.

L'étape est  tout aussi critique qu'en  première phase car il  se peut
que  l'état du  dépôt central  ait  changé grâce  au travail  d'autres
collaborateurs du projet.

Si la commande ~git push~ échoue, il faudra au développeur tirer à lui
la version  du dépôt central,  soigner les conflits, créer  un nouveau
commit de réconciliation, avant de renvoyer son travail au serveur.
#+BEGIN_EXAMPLE
# dernière vérification avant l'envoi
$ git fetch
$ git merge origin/master
# résolution des conflits
$ git add .
$ git commit -m "Etat de fin de journée de travail"
$ git push
#+END_EXAMPLE
* Autres liens
- http://documentup.com/skwp/git-workflows-book
- http://scottchacon.com/2011/08/31/github-flow.html
- https://guides.github.com/introduction/flow/index.html
- http://www.toptal.com/git/git-workflows-for-pros-a-good-git-guide
- https://sandofsky.com/blog/git-workflow.html
- https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows
- http://nvie.com/posts/a-successful-git-branching-model/

* Notes
Illustrations tirée depuis [[https://www.atlassian.com/git/tutorials/comparing-workflows][ce site]]
