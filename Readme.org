* Objectif
Fonctionnement  d'une  équipe  de collaborateurs  travaillant  sur  un
projet de développement.
* La notion de workflow
Une dépôt ~git~ centralise  la collaboration de plusieurs intervenants
sur un projet de développement.

La prise en main de ce logiciel  n'est pas intuitive. La mise en place
d'un schéma de  fonctionnement de base permettra  de l'exploiter avant
de le maîtriser.

* Le dépôt
Chaque collaborateur  héberge sur  son ordinateur  une copie  du dépôt
central.

#+BEGIN_SRC sh
git clone adresse_du_depot nom_local
#+END_SRC

#+BEGIN_HTML
<img src="./img/collab0.png" width=200 height=200 />
#+END_HTML

À chaque fois  qu'il l'estime nécessaire, un collaborateur  met à jour
le dépôt central en envoyant l'état d'avancement de son travail.

#+BEGIN_HTML
<img src="./img/bob_push.png" width=200 height=200 />
#+END_HTML

#+BEGIN_SRC sh
git add .
git commit -m "Message descriptif des ajouts"
git push
#+END_SRC

Si un autre collaborateur souhaite  à son tour envoyer l'avancement de
son travail, l'état du dépôt central aura changé.

#+BEGIN_HTML
<img src="./img/mary_failed_push.png" width=200 height=200 />
#+END_HTML

Le ~push~ échouera alors, avec un message d'erreur semblable au suivant :
#+BEGIN_EXAMPLE
$ git push
 ! [rejected]        master -> master (fetch first)
error: impossible de pousser des références vers 'adresse_du_depot'
astuce: Les mises à jour ont été rejetées car la branche distante contient du travail que
astuce: vous n'avez pas en local. Ceci est généralement causé par un autre dépôt poussé
astuce: vers la même référence. Vous pourriez intégrer d'abord les changements distants
astuce: (par exemple 'git pull ...') avant de pousser à nouveau.
astuce: Voir la 'Note à propos des avances rapides' dans 'git push --help' pour plus d'information.
$
#+END_EXAMPLE

~Git~   offre    différentes   possibilités   pour    résoudre   cette
situation.  Celle  présentée  ci-dessous   offre  l'avantage  de  nous
familiariser avec le logiciel.

La  commande   ~git  fetch~  permet   de  récupérer  le   nouvel  état
d'avancement  du  dépôt  et  le mettre  dans  un  emplacement  virtuel
~origin/master~ sans écraser le travail effectué par le collaborateur.

#+BEGIN_SRC sh
$ git fetch
remote: Counting objects: 5, donne.
remote: Compressing objects: 100% (2/2), donne.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), donne.
Depuis adresse_du_depot
   7f934c9..a25526d  master     -> origin/master
$
#+END_SRC

La  commande  ~git  merge  origin/master~ rassemblera  la  version  du
serveur avec le travail déjà  effectué par le collaborateur en faisant
ressortir les conflits qu'il pourra résoudre à son aise.

#+BEGIN_SRC sh
$ git merge origin/master
Fusion automatique de README.md
CONFLIT (contenu) : Conflit de fusion dans README.md
La fusion automatique a échoué ; réglez les conflits et validez le résultat.
$
#+END_SRC

Les conflits, ici contenus dans  le fichier ~README.md~ pour l'exemple
seront clairement délimités par à ~Git~ grâce à des marqueurs clairs.

#+BEGIN_EXAMPLE
<<<<<<< HEAD
La version
locale
=======
La version contenue dans
le dépôt central
>>>>>>> origin/master
#+END_EXAMPLE

Le collaborateur n'aura qu'à choisir  quelle portion du code garder et
celle qu'il désactivera en la  commentant avant d'envoyer sur le dépôt
central.  Il   devra  avant  cela  également   enlever  les  marqueurs
introduits par ~Git~ pour indiquer les conflits :

#+BEGIN_EXAMPLE
<<<<<<< HEAD
=======
>>>>>>> origin/master
#+END_EXAMPLE

#+BEGIN_SRC sh
$ git commit -m "Merge de conflits avec la version du dépôt central"
$ git push
#+END_SRC




Illustrations tirée depuis [[https://www.atlassian.com/git/tutorials/comparing-workflows][ce site]]

* Autres liens
- http://documentup.com/skwp/git-workflows-book
- http://scottchacon.com/2011/08/31/github-flow.html
- https://guides.github.com/introduction/flow/index.html
- http://www.toptal.com/git/git-workflows-for-pros-a-good-git-guide
- https://sandofsky.com/blog/git-workflow.html
- https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows
- http://nvie.com/posts/a-successful-git-branching-model/
