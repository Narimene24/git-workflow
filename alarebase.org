* Rebaser l'espace de travail
La commande ~git pull --rebase~ permet de construire  un nouveau commit
en prenant comme base l'état du dépôt central en cas de conflit.

Par opposition, la séquence ~git fetch~, ~git merge origin/master~ par
exemple se  base sur  le commit  contenu dans  l'espace du  travail du
collaborateur.

#+BEGIN_EXAMPLE
$ git pull --rebase
git@localhost's password:
remote: Counting objects: 5, donne.
remote: Compressing objects: 100% (2/2), donne.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), donne.
Depuis localhost:~/project
   4c89266..525612c  master     -> origin/master
Premièrement, rembobinons head pour rejouer votre travail par-dessus...
Application : aziz2
Utilisation de l'information de l'index pour reconstruire un arbre de base...
M       README.md
Retour à un patch de la base et fusion à 3 points...
Fusion automatique de README.md
CONFLIT (contenu) : Conflit de fusion dans README.md
Échec d'intégration des modifications.
Le patch a échoué à 0001 aziz2
La copie du patch qui a échoué se trouve dans :
   /home/aziz/nouveau/project/.git/rebase-apply/patch

Lorsque vous aurez résolu ce problème, lancez "git rebase --continue".
Si vous préférez sauter ce patch, lancez "git rebase --skip" à la place.
Pour extraire la branche d'origine et stopper le rebasage, lancez "git rebase --abort".
$
#+END_EXAMPLE
Cette distinction  entre les deux  stratégies se voit dans  la manière
dont ~Git~ arrange la fusion dans le fichier portant conflit entre les
deux versions.
#+BEGIN_EXAMPLE
<<<<<<< HEAD
version du dépôt
central
=======
version locale
>>>>>>> aziz2
#+END_EXAMPLE
Une fois les marqueurs supprimé et le conflit résolu, la commande ~git
rebase --continue~ nous donne la sortie suivante :
